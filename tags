!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/dev/neovimconfig/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	/f82c5355/
$FZF_DEFAULT_COMMAND	init.vim	/^  let $FZF_DEFAULT_COMMAND = 'ag --hidden --ignore .git -g ""'$/;"	v
$FZF_DEFAULT_COMMAND	init.vim	/^  let $FZF_DEFAULT_COMMAND = 'rg --files --hidden --follow --glob "!.git\/*"'$/;"	v
$FZF_DEFAULT_COMMAND	init.vim	/^let $FZF_DEFAULT_COMMAND =  "find * -path '*\/\\.*' -prune -o -path 'node_modules\/**' -prune -o/;"	v
0	 coc-settings.json	/^        "tags": ["styled", "css", "sass", "sty"]$/;"	s	array:compilerOptions.plugins.0.tags
0	 coc-settings.json	/^      "args": ["--stdio"]$/;"	s	array:languageserver.dockerfile.args
0	 coc-settings.json	/^      "args": ["--stdio"],$/;"	s	array:languageserver.intelephense.args
0	 coc-settings.json	/^      "filetypes": ["dockerfile"],$/;"	s	array:languageserver.dockerfile.filetypes
0	 coc-settings.json	/^      "filetypes": ["php"],$/;"	s	array:languageserver.intelephense.filetypes
0	 coc-settings.json	/^      {$/;"	o	array:compilerOptions.plugins
0	 coc-settings.json	/^    "go",$/;"	s	array:coc.preferences.formatOnSaveFiletypes
0	 coc-settings.json	/^    "javascript",$/;"	s	array:eslint.filetypes
0	 coc-settings.json	/^    "javascriptreact": ["javascript"],$/;"	s	array:snippets.extends.javascriptreact
0	 coc-settings.json	/^    "typescript": ["javascript"]$/;"	s	array:snippets.extends.typescript
0	 coc-settings.json	/^  "clangd.arguments": ["--background-index"],$/;"	s	array:clangd.arguments
0	 coc-settings.json	/^  "list.source.files.args": ["--type", "f"],$/;"	s	array:list.source.files.args
1	 coc-settings.json	/^        "tags": ["styled", "css", "sass", "sty"]$/;"	s	array:compilerOptions.plugins.0.tags
1	 coc-settings.json	/^    "javascriptreact",$/;"	s	array:eslint.filetypes
1	 coc-settings.json	/^    "python",$/;"	s	array:coc.preferences.formatOnSaveFiletypes
1	 coc-settings.json	/^  "list.source.files.args": ["--type", "f"],$/;"	s	array:list.source.files.args
2	 coc-settings.json	/^        "tags": ["styled", "css", "sass", "sty"]$/;"	s	array:compilerOptions.plugins.0.tags
2	 coc-settings.json	/^    "markdown",$/;"	s	array:coc.preferences.formatOnSaveFiletypes
2	 coc-settings.json	/^    "typescript",$/;"	s	array:eslint.filetypes
3	 coc-settings.json	/^        "tags": ["styled", "css", "sass", "sty"]$/;"	s	array:compilerOptions.plugins.0.tags
3	 coc-settings.json	/^    "javascript",$/;"	s	array:coc.preferences.formatOnSaveFiletypes
3	 coc-settings.json	/^    "typescriptreact"$/;"	s	array:eslint.filetypes
4	 coc-settings.json	/^    "typescript",$/;"	s	array:coc.preferences.formatOnSaveFiletypes
5	 coc-settings.json	/^    "json",$/;"	s	array:coc.preferences.formatOnSaveFiletypes
6	 coc-settings.json	/^    "jsonc"$/;"	s	array:coc.preferences.formatOnSaveFiletypes
<	init.vim	/^vmap < <gv$/;"	m
<C-P>	init.vim	/^cnoremap <C-P> <C-R>=expand("%:p:h") . "\/" <CR>$/;"	m
<C-S>	init.vim	/^inoremap <C-S> <C-O>:update<CR>$/;"	m
<C-S>	init.vim	/^noremap <C-S> :update<CR>$/;"	m
<C-\\>	init.vim	/^nnoremap <silent> <C-\\> :NERDTreeToggle<CR>$/;"	m
<C-]>	init.vim	/^nnoremap <silent> <C-]> :NERDTreeFind<CR>$/;"	m
<C-c>	init.vim	/^  vmap <C-c> :w !pbcopy<CR><CR>$/;"	m
<C-h>	init.vim	/^noremap <C-h> <C-w>h$/;"	m
<C-j>	init.vim	/^nnoremap <C-j> :m .+1<CR>==$/;"	m
<C-j>	init.vim	/^noremap <C-j> <C-w>j$/;"	m
<C-j>	init.vim	/^vnoremap <C-j> :m '>+1<CR>gv=gv$/;"	m
<C-k>	init.vim	/^nnoremap <C-k> :m .-2<CR>==$/;"	m
<C-k>	init.vim	/^noremap <C-k> <C-w>k$/;"	m
<C-k>	init.vim	/^vnoremap <C-k> :m '<-2<CR>gv=gv$/;"	m
<C-l>	init.vim	/^noremap <C-l> <C-w>l$/;"	m
<C-x>	init.vim	/^  vmap <C-x> :!pbcopy<CR>$/;"	m
<F4>	init.vim	/^nmap <silent> <F4> :TagbarToggle<CR>$/;"	m
<F5>	init.vim	/^nnoremap <F5> :YcmForceCompileAndDiagnostics<CR>$/;"	m
<F9>	init.vim	/^nnoremap <F9> :so $MYVIMRC<cr>$/;"	m
<Leader>e	init.vim	/^noremap <Leader>e :e <C-R>=expand("%:p:h") . "\/" <CR>$/;"	m
<Leader>ga	init.vim	/^noremap <Leader>ga :Gwrite<CR>$/;"	m
<Leader>gb	init.vim	/^noremap <Leader>gb :Gblame<CR>$/;"	m
<Leader>gc	init.vim	/^noremap <Leader>gc :Gcommit<CR>$/;"	m
<Leader>gd	init.vim	/^noremap <Leader>gd :Gvdiff<CR>$/;"	m
<Leader>gll	init.vim	/^noremap <Leader>gll :Gpull<CR>$/;"	m
<Leader>gr	init.vim	/^noremap <Leader>gr :Gremove<CR>$/;"	m
<Leader>gs	init.vim	/^noremap <Leader>gs :Gstatus<CR>$/;"	m
<Leader>gsh	init.vim	/^noremap <Leader>gsh :Gpush<CR>$/;"	m
<Leader>h	init.vim	/^noremap <Leader>h :<C-u>split<CR>$/;"	m
<Leader>o	init.vim	/^nnoremap <Leader>o :.Gbrowse<CR>$/;"	m
<Leader>te	init.vim	/^noremap <Leader>te :tabe <C-R>=expand("%:p:h") . "\/" <CR>$/;"	m
<Leader>v	init.vim	/^noremap <Leader>v :<C-u>vsplit<CR>$/;"	m
<S-TAB>	init.vim	/^inoremap <expr><S-TAB> pumvisible() ? "\\<C-p>" : "\\<C-h>"$/;"	m
<S-Tab>	init.vim	/^nnoremap <S-Tab> gT$/;"	m
<S-t>	init.vim	/^nnoremap <silent> <S-t> :tabnew<CR>$/;"	m
<TAB>	init.vim	/^inoremap <silent><expr> <TAB>$/;"	m
<Tab>	init.vim	/^nnoremap <Tab> gt$/;"	m
<c-@>	init.vim	/^  inoremap <silent><expr> <c-@> coc#refresh()$/;"	m
<c-i>	init.vim	/^nnoremap <c-i> :Ag<space>$/;"	m
<c-p>	init.vim	/^nnoremap <c-p> :Files <cr>$/;"	m
<c-space>	init.vim	/^  inoremap <silent><expr> <c-space> coc#refresh()$/;"	m
<c-x>	init.vim	/^nnoremap <c-x> :bp\\|bd #<cr>$/;"	m
<cr>	init.vim	/^  inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\\<C-y>" : "\\<C-g>u\\<CR>"$/;"	m
<cr>	init.vim	/^  inoremap <expr> <cr> pumvisible() ? "\\<C-y>" : "\\<C-g>u\\<CR>"$/;"	m
<leader>.	init.vim	/^nnoremap <leader>. :lcd %:p:h<CR>$/;"	m
<leader><space>	init.vim	/^nnoremap <leader><space> :nohlsearch<cr>$/;"	m
<leader><space>	init.vim	/^nnoremap <silent> <leader><space> :noh<cr>$/;"	m
<leader>b	init.vim	/^nnoremap <silent> <leader>b :Buffers<CR>$/;"	m
<leader>e	init.vim	/^nnoremap <silent> <leader>e :FZF -m<CR>$/;"	m
<leader>f	init.vim	/^nnoremap <silent> <leader>f :Rgrep<CR>$/;"	m
<leader>p	init.vim	/^noremap <leader>p "+gP<CR>$/;"	m
<leader>q	init.vim	/^noremap <leader>q :bp<CR>$/;"	m
<leader>rn	init.vim	/^nmap <leader>rn <Plug>(coc-rename)$/;"	m
<leader>sh	init.vim	/^nnoremap <silent> <leader>sh :terminal<CR>$/;"	m
<leader>w	init.vim	/^noremap <leader>w :bn<CR>$/;"	m
<leader>x	init.vim	/^noremap <leader>x :bn<CR>$/;"	m
<leader>y	init.vim	/^nmap <leader>y :History:<CR>$/;"	m
<leader>z	init.vim	/^noremap <leader>z :bp<CR>$/;"	m
>	init.vim	/^vmap > >gv$/;"	m
CleanExtraSpaces	init.vim	/^function! CleanExtraSpaces() "Function to clean unwanted spaces$/;"	f
CursorLine	init.vim	/^augroup CursorLine$/;"	a
Find	init.vim	/^  command! -bang -nargs=* Find call fzf#vim#grep('rg --column --line-number --no-heading --fixed/;"	c
FixWhitespace	init.vim	/^command! FixWhitespace :%s\/\\s\\+$\/\/e$/;"	c
Grep_Default_Options	init.vim	/^let Grep_Default_Options = '-IR'$/;"	v
Grep_Skip_Dirs	init.vim	/^let Grep_Skip_Dirs = '.git node_modules'$/;"	v
Grep_Skip_Files	init.vim	/^let Grep_Skip_Files = '*.log *.db'$/;"	v
J	init.vim	/^vnoremap J :m '>+1<CR>gv=gv$/;"	m
K	init.vim	/^vnoremap K :m '<-2<CR>gv=gv$/;"	m
N	init.vim	/^nnoremap N Nzzzv$/;"	m
NERDTreeAutoDeleteBuffer	init.vim	/^let NERDTreeAutoDeleteBuffer = 1$/;"	v
NERDTreeDirArrows	init.vim	/^let NERDTreeDirArrows = 1$/;"	v
NERDTreeShowHidden	init.vim	/^let NERDTreeShowHidden=1$/;"	v
NVIM_TUI_ENABLE_TRUE_COLOR	init.vim	/^let NVIM_TUI_ENABLE_TRUE_COLOR=1$/;"	v
VimCSS3Syntax	init.vim	/^augroup VimCSS3Syntax$/;"	a
XX	init.vim	/^noremap XX "+x<CR>$/;"	m
YY	init.vim	/^noremap YY "+y<CR>$/;"	m
args	 coc-settings.json	/^      "args": ["--stdio"]$/;"	a	object:languageserver.dockerfile
args	 coc-settings.json	/^      "args": ["--stdio"],$/;"	a	object:languageserver.intelephense
base16colorspace	init.vim	/^let base16colorspace=256  " Access colors present in 256 colorspace$/;"	v
clangd.arguments	 coc-settings.json	/^  "clangd.arguments": ["--background-index"],$/;"	a
coc.preferences.extensionUpdateCheck	 coc-settings.json	/^  "coc.preferences.extensionUpdateCheck": "daily",$/;"	s
coc.preferences.formatOnSaveFiletypes	 coc-settings.json	/^  "coc.preferences.formatOnSaveFiletypes": [$/;"	a
coc.preferences.formatOnType	 coc-settings.json	/^  "coc.preferences.formatOnType": true,$/;"	b
coc.source.around.firstMatch	 coc-settings.json	/^  "coc.source.around.firstMatch": false,$/;"	b
coc.source.file.ignoreHidden	 coc-settings.json	/^  "coc.source.file.ignoreHidden": false,$/;"	b
codeLens.enable	 coc-settings.json	/^  "codeLens.enable": true,$/;"	b
command	 coc-settings.json	/^      "command": "docker-langserver",$/;"	s	object:languageserver.dockerfile
command	 coc-settings.json	/^      "command": "intelephense",$/;"	s	object:languageserver.intelephense
compilerOptions	 coc-settings.json	/^  "compilerOptions": {$/;"	o
diagnostic-languageserver.filetypes	 coc-settings.json	/^  "diagnostic-languageserver.filetypes": {$/;"	o
diagnostic.errorSign	 coc-settings.json	/^  "diagnostic.errorSign": "✘",$/;"	s
diagnostic.infoSign	 coc-settings.json	/^  "diagnostic.infoSign": "",$/;"	s
diagnostic.warningSign	 coc-settings.json	/^  "diagnostic.warningSign": "",$/;"	s
dockerfile	 coc-settings.json	/^    "dockerfile": {$/;"	o	object:languageserver
eslint.enable	 coc-settings.json	/^  "eslint.enable": false,$/;"	b
eslint.filetypes	 coc-settings.json	/^  "eslint.filetypes": [$/;"	a
excludes	.importjs.js	/^  excludes: [".\/react-components\/**\/test\/**"]$/;"	p	class:module.exports
exports	.importjs.js	/^module.exports = {$/;"	c	class:module
filetypes	 coc-settings.json	/^      "filetypes": ["dockerfile"],$/;"	a	object:languageserver.dockerfile
filetypes	 coc-settings.json	/^      "filetypes": ["php"],$/;"	a	object:languageserver.intelephense
g:CSApprox_loaded	init.vim	/^  let g:CSApprox_loaded = 1$/;"	v
g:NERDTreeChDirMode	init.vim	/^let g:NERDTreeChDirMode=2$/;"	v
g:NERDTreeIgnore	init.vim	/^let g:NERDTreeIgnore=['\\.rbc$', '\\~$', '\\.pyc$', '\\.db$', '\\.sqlite$', '__pycache__']$/;"	v
g:NERDTreeMapOpenInTabSilent	init.vim	/^let g:NERDTreeMapOpenInTabSilent = '<RightMouse>'$/;"	v
g:NERDTreeShowBookmarks	init.vim	/^let g:NERDTreeShowBookmarks=0$/;"	v
g:NERDTreeSortOrder	init.vim	/^let g:NERDTreeSortOrder=['^__\\.py$', '\\\/$', '*', '\\.swp$', '\\.bak$', '\\~$']$/;"	v
g:NERDTreeWinPos	init.vim	/^let g:NERDTreeWinPos = "right"$/;"	v
g:NERDTreeWinSize	init.vim	/^let g:NERDTreeWinSize = 20$/;"	v
g:UltiSnipsEditSplit	init.vim	/^let g:UltiSnipsEditSplit="vertical"$/;"	v
g:UltiSnipsExpandTrigger	init.vim	/^let g:UltiSnipsExpandTrigger="<tab>"$/;"	v
g:UltiSnipsJumpBackwardTrigger	init.vim	/^let g:UltiSnipsJumpBackwardTrigger="<c-b>"$/;"	v
g:UltiSnipsJumpForwardTrigger	init.vim	/^let g:UltiSnipsJumpForwardTrigger="<tab>"$/;"	v
g:airline#extensions#ale#enabled	init.vim	/^let g:airline#extensions#ale#enabled = 1$/;"	v
g:airline#extensions#branch#enabled	init.vim	/^let g:airline#extensions#branch#enabled = 1$/;"	v
g:airline#extensions#branch#prefix	init.vim	/^  let g:airline#extensions#branch#prefix     = '⤴' "➔, ➥, ⎇$/;"	v
g:airline#extensions#linecolumn#prefix	init.vim	/^  let g:airline#extensions#linecolumn#prefix = '¶'$/;"	v
g:airline#extensions#paste#symbol	init.vim	/^  let g:airline#extensions#paste#symbol      = 'ρ'$/;"	v
g:airline#extensions#readonly#symbol	init.vim	/^  let g:airline#extensions#readonly#symbol   = '⊘'$/;"	v
g:airline#extensions#tabline#enabled	init.vim	/^let g:airline#extensions#tabline#enabled = 1$/;"	v
g:airline#extensions#tabline#left_alt_sep	init.vim	/^  let g:airline#extensions#tabline#left_alt_sep = ''$/;"	v
g:airline#extensions#tabline#left_alt_sep	init.vim	/^  let g:airline#extensions#tabline#left_alt_sep = '|'$/;"	v
g:airline#extensions#tabline#left_sep	init.vim	/^  let g:airline#extensions#tabline#left_sep = ' '$/;"	v
g:airline#extensions#tabline#left_sep	init.vim	/^  let g:airline#extensions#tabline#left_sep = ''$/;"	v
g:airline#extensions#tagbar#enabled	init.vim	/^let g:airline#extensions#tagbar#enabled = 1$/;"	v
g:airline#extensions#virtualenv#enabled	init.vim	/^let g:airline#extensions#virtualenv#enabled = 1$/;"	v
g:airline_left_alt_sep	init.vim	/^  let g:airline_left_alt_sep      = '»'$/;"	v
g:airline_left_alt_sep	init.vim	/^  let g:airline_left_alt_sep = ''$/;"	v
g:airline_left_sep	init.vim	/^  let g:airline_left_sep          = '▶'$/;"	v
g:airline_left_sep	init.vim	/^  let g:airline_left_sep = ''$/;"	v
g:airline_powerline_fonts	init.vim	/^let g:airline_powerline_fonts = 1$/;"	v
g:airline_right_alt_sep	init.vim	/^  let g:airline_right_alt_sep     = '«'$/;"	v
g:airline_right_alt_sep	init.vim	/^  let g:airline_right_alt_sep = ''$/;"	v
g:airline_right_sep	init.vim	/^  let g:airline_right_sep         = '◀'$/;"	v
g:airline_right_sep	init.vim	/^  let g:airline_right_sep = ''$/;"	v
g:airline_skip_empty_sections	init.vim	/^let g:airline_skip_empty_sections = 1$/;"	v
g:airline_symbols	init.vim	/^  let g:airline_symbols = {}$/;"	v
g:airline_symbols	init.vim	/^  let g:airline_symbols.branch    = '⎇'$/;"	v
g:airline_symbols	init.vim	/^  let g:airline_symbols.branch = ''$/;"	v
g:airline_symbols	init.vim	/^  let g:airline_symbols.linenr    = '␊'$/;"	v
g:airline_symbols	init.vim	/^  let g:airline_symbols.linenr = ''$/;"	v
g:airline_symbols	init.vim	/^  let g:airline_symbols.paste     = 'Þ'$/;"	v
g:airline_symbols	init.vim	/^  let g:airline_symbols.paste     = 'ρ'$/;"	v
g:airline_symbols	init.vim	/^  let g:airline_symbols.paste     = '∥'$/;"	v
g:airline_symbols	init.vim	/^  let g:airline_symbols.readonly = ''$/;"	v
g:airline_symbols	init.vim	/^  let g:airline_symbols.whitespace = 'Ξ'$/;"	v
g:airline_theme	init.vim	/^let g:airline_theme ='embark'  " jellybeans  'bubblegum'   'powerlineish'$/;"	v
g:ale_linters	init.vim	/^let g:ale_linters = {}$/;"	v
g:anyfold_fold_comments	init.vim	/^let g:anyfold_fold_comments=1$/;"	v
g:coc_disable_startup_warning	init.vim	/^let g:coc_disable_startup_warning = 1$/;"	v
g:coc_global_extensions	init.vim	/^let g:coc_global_extensions = ['coc-css','coc-json','coc-fzf-preview','coc-stylelint','coc-tsser/;"	v
g:comfortable_motion_scroll_down_key	init.vim	/^let g:comfortable_motion_scroll_down_key = "j"$/;"	v
g:comfortable_motion_scroll_up_key	init.vim	/^let g:comfortable_motion_scroll_up_key = "k"$/;"	v
g:embark_termcolors	init.vim	/^let g:embark_termcolors=256$/;"	v
g:enable_bold_font	init.vim	/^let g:enable_bold_font = 1$/;"	v
g:enable_italic_font	init.vim	/^let g:enable_italic_font = 1$/;"	v
g:equinusocio_material_bracket_improved	init.vim	/^let g:equinusocio_material_bracket_improved = 1$/;"	v
g:equinusocio_material_hide_vertsplit	init.vim	/^let g:equinusocio_material_hide_vertsplit = 1$/;"	v
g:equinusocio_material_less	init.vim	/^let g:equinusocio_material_less = 50$/;"	v
g:equinusocio_material_style	init.vim	/^let g:equinusocio_material_style = 'darker'$/;"	v
g:fzf_action	init.vim	/^let g:fzf_action = {$/;"	v
g:fzf_colors	init.vim	/^let g:fzf_colors =$/;"	v
g:highlightedyank_highlight_duration	init.vim	/^let g:highlightedyank_highlight_duration = 1000$/;"	v
g:indentLine_char	init.vim	/^  let g:indentLine_char = '|'$/;"	v
g:indentLine_char	init.vim	/^let g:indentLine_char = '|'$/;"	v
g:indentLine_concealcursor	init.vim	/^  let g:indentLine_concealcursor = 'inc'$/;"	v
g:indentLine_concealcursor	init.vim	/^  let g:indentLine_concealcursor = 0$/;"	v
g:indentLine_concealcursor	init.vim	/^let g:indentLine_concealcursor = 0$/;"	v
g:indentLine_conceallevel	init.vim	/^let g:indentLine_conceallevel = 2$/;"	v
g:indentLine_enabled	init.vim	/^  let g:indentLine_enabled = 1$/;"	v
g:indentLine_enabled	init.vim	/^let g:indentLine_enabled = 1$/;"	v
g:indentLine_faster	init.vim	/^  let g:indentLine_faster = 1$/;"	v
g:indentLine_faster	init.vim	/^let g:indentLine_faster = 1$/;"	v
g:javascript_enable_domhtmlcss	init.vim	/^let g:javascript_enable_domhtmlcss = 1$/;"	v
g:jedi#completions_command	init.vim	/^let g:jedi#completions_command = "<C-Space>"$/;"	v
g:jedi#documentation_command	init.vim	/^let g:jedi#documentation_command = "K"$/;"	v
g:jedi#goto_assignments_command	init.vim	/^let g:jedi#goto_assignments_command = "<leader>g"$/;"	v
g:jedi#goto_definitions_command	init.vim	/^let g:jedi#goto_definitions_command = "<leader>d"$/;"	v
g:jedi#popup_on_dot	init.vim	/^let g:jedi#popup_on_dot = 0$/;"	v
g:jedi#rename_command	init.vim	/^let g:jedi#rename_command = "<leader>r"$/;"	v
g:jedi#show_call_signatures	init.vim	/^let g:jedi#show_call_signatures = "0"$/;"	v
g:jedi#smart_auto_mappings	init.vim	/^let g:jedi#smart_auto_mappings = 0$/;"	v
g:jedi#usages_command	init.vim	/^let g:jedi#usages_command = "<leader>n"$/;"	v
g:js_file_import_prompt_if_no_tag	init.vim	/^let g:js_file_import_prompt_if_no_tag = 0$/;"	v
g:js_file_import_sort_after_insert	init.vim	/^let g:js_file_import_sort_after_insert = 1$/;"	v
g:js_file_import_use_fzf	init.vim	/^let g:js_file_import_use_fzf = 1$/;"	v
g:jsx_ext_required	init.vim	/^let g:jsx_ext_required = 0$/;"	v
g:jsx_ext_required	init.vim	/^let g:jsx_ext_required = 1$/;"	v
g:jsx_pragma_required	init.vim	/^let g:jsx_pragma_required = 1$/;"	v
g:loaded_netrw	init.vim	/^let g:loaded_netrw       = 1$/;"	v
g:loaded_netrwPlugin	init.vim	/^let g:loaded_netrwPlugin = 1$/;"	v
g:make	init.vim	/^        let g:make = 'make'$/;"	v
g:make	init.vim	/^let g:make = 'gmake'$/;"	v
g:mta_filetypes	init.vim	/^let g:mta_filetypes = {$/;"	v
g:mta_set_default_matchtag_color	init.vim	/^let g:mta_set_default_matchtag_color = 1$/;"	v
g:mta_use_matchparen_group	init.vim	/^let g:mta_use_matchparen_group = 1$/;"	v
g:neotags#javascript#order	init.vim	/^let g:neotags#javascript#order = 'cCfmpo'$/;"	v
g:nerdtree_tabs_focus_on_files	init.vim	/^let g:nerdtree_tabs_focus_on_files=0$/;"	v
g:polyglot_disabled	init.vim	/^let g:polyglot_disabled = ['python']$/;"	v
g:prettier#autoformat	init.vim	/^let g:prettier#autoformat =0$/;"	v
g:prettier#autoformat_config_present	init.vim	/^let g:prettier#autoformat_config_present = 1$/;"	v
g:prettier#config#config_precedence	init.vim	/^let g:prettier#config#config_precedence = 'file-override'$/;"	v
g:prettier#config#parser	init.vim	/^let g:prettier#config#parser = ''$/;"	v
g:prettier#quickfix_enabled	init.vim	/^let g:prettier#quickfix_enabled =1$/;"	v
g:rainbow_active	init.vim	/^let g:rainbow_active = 1$/;"	v
g:rehash256	init.vim	/^let g:rehash256 = 1$/;"	v
g:tagalong_filetypes	init.vim	/^let g:tagalong_filetypes = ['html','js','javascript','jsx','jsx','ts','php']$/;"	v
g:tagbar_autofocus	init.vim	/^let g:tagbar_autofocus = 1$/;"	v
g:user_emmet_install_global	init.vim	/^let g:user_emmet_install_global =1$/;"	v
g:user_emmet_leader_key	init.vim	/^let g:user_emmet_leader_key=','$/;"	v
g:user_emmet_mode	init.vim	/^let g:user_emmet_mode='a'    "enable all function in all mode.$/;"	v
g:user_emmet_mode	init.vim	/^let g:user_emmet_mode='inv'  "enable all functions, which is equal to$/;"	v
g:user_emmet_mode	init.vim	/^let g:user_emmet_mode='n'    "only enable normal mode functions.$/;"	v
g:user_emmet_settings	init.vim	/^let g:user_emmet_settings = {$/;"	v
g:vim_jsx_pretty_colorful_config	init.vim	/^let g:vim_jsx_pretty_colorful_config = 1$/;"	v
g:vim_jsx_pretty_highlight_close_tag	init.vim	/^let g:vim_jsx_pretty_highlight_close_tag = 1$/;"	v
g:xml_syntax_folding	init.vim	/^let g:xml_syntax_folding = 0$/;"	v
g:yats_host_keyword	init.vim	/^let g:yats_host_keyword = 1$/;"	v
g:ycm_autoclose_preview_window_after_completion	init.vim	/^let g:ycm_autoclose_preview_window_after_completion=1$/;"	v
gd	init.vim	/^nmap <silent> gd <Plug>(coc-definition)$/;"	m
gf	init.vim	/^nmap <silent> gf <Plug>(coc-definition)$/;"	m
gi	init.vim	/^nmap <silent> gi <Plug>(coc-implementation)$/;"	m
git.enableGutters	 coc-settings.json	/^  "git.enableGutters": false$/;"	b
git.realtimeGutters	 coc-settings.json	/^  "git.realtimeGutters": true,$/;"	b
gr	init.vim	/^nmap <silent> gr <Plug>(coc-references)$/;"	m
gt	init.vim	/^nmap <silent> gt <Plug>(coc-type-definition)$/;"	m
initializationOptions	 coc-settings.json	/^      "initializationOptions": {$/;"	o	object:languageserver.intelephense
intelephense	 coc-settings.json	/^    "intelephense": {$/;"	o	object:languageserver
javascriptreact	 coc-settings.json	/^    "javascriptreact": ["javascript"],$/;"	a	object:snippets.extends
languageserver	 coc-settings.json	/^  "languageserver": {$/;"	o
list.source.files.args	 coc-settings.json	/^  "list.source.files.args": ["--type", "f"],$/;"	a
list.source.files.command	 coc-settings.json	/^  "list.source.files.command": "fdfind",$/;"	s
mapleader	init.vim	/^let mapleader=','$/;"	v
n	init.vim	/^nnoremap n nzzzv$/;"	m
name	 coc-settings.json	/^        "name": "typescript-styled-plugin",$/;"	s	object:compilerOptions.plugins.0
no_buffers_menu	init.vim	/^let no_buffers_menu=1$/;"	v
plugins	 coc-settings.json	/^    "plugins": [$/;"	a	object:compilerOptions
python_highlight_all	init.vim	/^let python_highlight_all = 1$/;"	v
rust.clippy_preference	 coc-settings.json	/^  "rust.clippy_preference": "on",$/;"	s
s:check_back_space	init.vim	/^function! s:check_back_space() abort$/;"	f
s:setupWrapping	init.vim	/^  function s:setupWrapping()$/;"	f
sh	 coc-settings.json	/^    "sh": "shellcheck"$/;"	s	object:diagnostic-languageserver.filetypes
signature.target	 coc-settings.json	/^  "signature.target": "echo",$/;"	s
snippets.extends	 coc-settings.json	/^  "snippets.extends": {$/;"	o
snippets.ultisnips.enable	 coc-settings.json	/^  "snippets.ultisnips.enable": false,$/;"	b
snippets.ultisnips.usePythonx	 coc-settings.json	/^  "snippets.ultisnips.usePythonx": false,$/;"	b
storagePath	 coc-settings.json	/^        "storagePath": "\/tmp\/intelephense"$/;"	s	object:languageserver.intelephense.initializationOptions
suggest.asciiCharactersOnly	 coc-settings.json	/^  "suggest.asciiCharactersOnly": true,$/;"	b
suggest.noselect	 coc-settings.json	/^  "suggest.noselect": true,$/;"	b
suggest.timeout	 coc-settings.json	/^  "suggest.timeout": 5000,$/;"	n
tags	 coc-settings.json	/^        "tags": ["styled", "css", "sass", "sty"]$/;"	a	object:compilerOptions.plugins.0
tsserver.enableJavascript	 coc-settings.json	/^  "tsserver.enableJavascript": true,$/;"	b
typescript	 coc-settings.json	/^    "typescript": ["javascript"]$/;"	a	object:snippets.extends
typescript.format.insertSpaceAfterFunctionKeywordForAnonymousFunctions	 coc-settings.json	/^  "typescript.format.insertSpaceAfterFunctionKeywordForAnonymousFunctions": false,$/;"	b
typescript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBraces	 coc-settings.json	/^  "typescript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBraces": true,$/;"	b
typescript.format.semicolons	 coc-settings.json	/^  "typescript.format.semicolons": "insert",$/;"	s
typescript.preferences.quoteStyle	 coc-settings.json	/^  "typescript.preferences.quoteStyle": "double",$/;"	s
typescript.preferences.useAliasesForRenames	 coc-settings.json	/^  "typescript.preferences.useAliasesForRenames": false,$/;"	b
typescript.referencesCodeLens.enable	 coc-settings.json	/^  "typescript.referencesCodeLens.enable": false,$/;"	b
vimrc	init.vim	/^augroup vimrc-javascript$/;"	a
vimrc	init.vim	/^augroup vimrc-make-cmake$/;"	a
vimrc	init.vim	/^augroup vimrc-python$/;"	a
vimrc	init.vim	/^augroup vimrc-remember-cursor-position$/;"	a
vimrc	init.vim	/^augroup vimrc-sync-fromstart$/;"	a
vimrc	init.vim	/^augroup vimrc-wrapping$/;"	a
